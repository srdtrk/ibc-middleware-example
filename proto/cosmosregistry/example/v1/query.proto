syntax = "proto3";
package cosmosregistry.example.v1;

option go_package = "github.com/cosmosregistry/example";

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmosregistry/example/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Msg defines the module Msg service.
service Query {
  // CallbackCounter returns the current callback counter value.
  rpc CallbackCounter(QueryCallbackCounterRequest) returns (QueryCallbackCounterResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/cosmosregistry/example/v1/callbackcounter/{port_id}/{channel_id}";
  }

  // CallbackCounters returns all the counter values.
  rpc CallbackCounters(QueryCallbackCountersRequest) returns (QueryCallbackCountersResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/cosmosregistry/example/v1/callbackcounters";
  }

  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmosregistry/example/v1/params";
  }
}

// QueryCallbackCounterRequest is the request type for the Query/Counter RPC
// method.
message QueryCallbackCounterRequest {
  // port_id defines the port_id to query for the counter.
  string port_id = 1;
  // channel_id defines the channel_id to query for the counter.
  string channel_id = 2;
}

// QueryCallbackCounterResponse is the response type for the Query/Counter RPC
// method.
message QueryCallbackCounterResponse {
  // counter defines the current counter for the sender.
  CallbackCounter counter = 1;
}

// QueryCallbackCountersRequest is the request type for the Query/Counters RPC
message QueryCallbackCountersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryCallbackCountersResponse is the response type for the Query/Counters RPC
// method.
message QueryCallbackCountersResponse {
  // counters defines all the callback counters in the store.
  repeated CallbackCounter counters = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
